#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(5,6,1,6,2,6,5,1,2,4,3,1,2,3,4,1,6,5,1,4)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
data_new <- data %>% filter(!(is.na(activity)))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
data_new <- data %>% filter(!(is.na(activity)))
install.packages("pacman", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
data_new <- data %>% filter(!(is.na(activity)))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
data_new <- data %>% filter(!(is.na(activity)))
## 1. The GitHub went down causing us to be unable to access their code and the possibility of work. Further, there are many economic losses. It has been happened many times.
## 2. One of the most common problems in network security incidents is usually human error/error. HEAD overwriting, accidental deletion of branches, and even deliberate deletion of frustrated employees (or former employees who can still access the repository) - are some of the most common reasons for data loss.
## One of the biggest interruptions of GitLab occurred in 2017. It is caused by the accidental deletion of data from the main database server. This event caused the GitLab.com service to be unavailable for hours. They also lost some production data that could not be recovered in the end. Specifically, they lost changes to the database and data, such as projects, comments, user accounts, problems and fragments.
data_new <- data %>% filter(!(is.na(activity)))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
data_new <- data %>% filter(!(is.na(activity)))
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
install.packages('plotrix')
library('plotrix')
install.packages('flextable')
library('flextable')
library(ggplot2)
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
install.packages('plotrix')
library('plotrix')
install.packages('flextable')
library('flextable')
library(ggplot2)
data_new <- data %>% filter(!(is.na(activity)))
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
install.packages('plotrix')
library('plotrix')
install.packages('flextable')
library('flextable')
library(ggplot2)
data_new <- data %>% filter(!(is.na(activity)))
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
library(tidyr)
library(dplyr)
library('plotrix')
library('flextable')
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
library('plotrix')
library('flextable')
library(ggplot2)
data_new <- data %>% filter(!(is.na(activity)))
data_new <- data %>% filter(!(is.na(activity)))
data_new <- as_tibble(data) %>% filter(!(is.na(activity)))
data_new <- as_tibble(data) %>% filter(!(is.na(activity)))
data_new <- data%>% filter(!(is.na(activity)))
data_new <- as_tibble(data)%>% filter(!(is.na(activity)))
data_new <- data%>% filter(!(is.na(activity)))
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
library('plotrix')
library('flextable')
library(ggplot2)
## 1. The GitHub went down causing us to be unable to access their code and the possibility of work. Further, there are many economic losses. It has been happened many times.
## 2. One of the most common problems in network security incidents is usually human error/error. HEAD overwriting, accidental deletion of branches, and even deliberate deletion of frustrated employees (or former employees who can still access the repository) - are some of the most common reasons for data loss.
## One of the biggest interruptions of GitLab occurred in 2017. It is caused by the accidental deletion of data from the main database server. This event caused the GitLab.com service to be unavailable for hours. They also lost some production data that could not be recovered in the end. Specifically, they lost changes to the database and data, such as projects, comments, user accounts, problems and fragments.
## if we change echo = TRUE to echo = FALSE, it will prevents code, but not the results from appearing in the finished file.
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
data
path <- "./output/data.csv"
write_csv(data, file = path)
data_new <- data%>% filter(!(is.na(activity)))
data_new
# Drop irrelevant columns
drop <- c("comment","loc","sl","size")
data_drop = data_new[,!(names(data_new) %in% drop)]
data_drop
# Check spelling in species and treatment but also generate a summary table
std <- function(a) sd(a) / sqrt(length(a))
df <- data_drop %>% group_by(species, treatment)%>%summarise(sample_size = n(),mean_activity = mean(activity),standard_error_activity = std(activity))
df
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
library('plotrix')
library('flextable')
library(ggplot2)
data_new <- data%>% filter(!(is.na(activity)))
data_new
# Drop irrelevant columns
drop <- c("comment","loc","sl","size")
data_drop = data_new[,!(names(data_new) %in% drop)]
data_drop
# Check spelling in species and treatment but also generate a summary table
std <- function(a) sd(a) / sqrt(length(a))
df <- data_drop %>% group_by(species, treatment)%>%summarise(sample_size = n(),mean_activity = mean(activity),standard_error_activity = std(activity))
df
# Use flextable to render the summary table in a tidy format
df_flextable <-flextable(
df,
col_keys = names(df),
cwidth = 1.2,
cheight = 0.4,
defaults = list(),
theme_fun = theme_vanilla)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data = df, mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment))+ geom_boxplot()
pics_acantho<-readPNG("./pics/acantho.png")
pics_ambon<-readPNG("./pics/ambon.png")
pics_chromis<-readPNG("./pics/chromis.png")
pics_humbug<-readPNG("./pics/humbug.png")
pics_lemon<-readPNG("./pics/lemon.png")
pics_whitedams<-readPNG("./pics/whitedams.png")
ggplot(data = df, mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment))+ geom_boxplot()+annotation_raster(pics_acantho,0.5,1.5,30,35)+annotation_raster(pics_ambon,1.6,2.5,30,35)+annotation_raster(pics_chromis,2.6,3.5,30,35)+annotation_raster(pics_humbug,3.6,4.5,30,35)+annotation_raster(pics_lemon,4.6,5.5,30,35)+annotation_raster(pics_whitedams,5.6,6.5,30,35)
# Use ggsave to save the figure
?ggsave
ggsave("Fish.pdf",plot = last_plot(),path = 'output/figures/',scale = 1,width = NA,height = NA)
## After adding the folder path to.gitignore file, the file in the folder will not be tracked by github and being uploaded to the master repository. But if we remove the folder path from the .gitignore file, the file in the folder will be shown in the github Desktop and will be tracked again.
## I want to track the files in the pic/ folder on GitHub. In github, we skip compilation of intermediate files, etc.If a file is automatically generated from another file, the automatically generated file does not need to be in the repository.
## Although the file in the PIC folder is a PNG image, it is part of the compilation file and is not an intermediate file but an initial file because it is applied as the background resource when we generate the image. Therefore, it should be regarded as a traceable file. When we modify the picture in PIC folder, the background of the generated picture will also change, and the change will lead to the change of the output. It is compilable, so it needs to be tracked.
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
filter(df, species %in% c("chromis", "lemon", "acantho")) %>% ggplot(mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment)) +geom_boxplot()+annotation_raster(pics_chromis,0.6,1.5,21,24)+annotation_raster(pics_lemon,1.6,2.5,21,24)+annotation_raster(pics_acantho,2.6,3.5,21,24)
# Do the t-test for all species
acantho_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "acantho")
acantho_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "acantho")
t_test_acantho <- t.test(acantho_data_CO2$activity,acantho_data_control$activity)
t_test_acantho
ambon_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "ambon")
ambon_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "ambon")
t_test_ambon <- t.test(ambon_data_CO2$activity,ambon_data_control$activity)
t_test_ambon
chromis_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "chromis")
chromis_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "chromis")
t_test_chromis <- t.test(chromis_data_CO2$activity,chromis_data_control$activity)
t_test_chromis
humbug_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "humbug")
humbug_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "humbug")
t_test_humbug <- t.test(humbug_data_CO2$activity,humbug_data_control$activity)
t_test_humbug
lemon_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "lemon")
lemon_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "lemon")
t_test_lemon <- t.test(lemon_data_CO2$activity,lemon_data_control$activity)
t_test_lemon
whitedams_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "whitedams")
whitedams_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "whitedams")
t_test_whitedams<- t.test(whitedams_data_CO2$activity,whitedams_data_control$activity)
t_test_whitedams
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
species <- c("acantho", "ambon", "chromis", "humbug", "lemon","whitedams")
t <- c(-0.9,0.3,-0.4,2,2,-1)
df <- c(192,41,25,137,42,119)
p_value <- c(t_test_acantho$p.value,t_test_ambon$p.value,t_test_chromis$p.value,t_test_humbug$p.value,t_test_lemon$p.value,t_test_whitedams$p.value)
df <- data.frame(species, t,df,p_value)
print (df)
# do the t-test by using the for loop for all the species
for (i in unique(new_data$species))
{
print(i)
new_name <- new_data %>%  filter(species == i)
outcome <- t.test(new_name%>% filter(treatment == "control") %>% select(activity), new_name %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filter <- df %>%  filter(species == i)
outcome <- t.test(df_filter%>% filter(treatment == "control") %>% select(activity), df_filter %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- df %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filter %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- df %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filter %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# Drop irrelevant columns
drop <- c("comment","loc","sl","size")
data_drop = data_new[,!(names(data_new) %in% drop)]
data_drop
# Check spelling in species and treatment but also generate a summary table
std <- function(a) sd(a) / sqrt(length(a))
data_add<- data_drop %>% group_by(species, treatment)%>%summarise(sample_size = n(),mean_activity = mean(activity),standard_error_activity = std(activity))
data_add
# Use flextable to render the summary table in a tidy format
df_flextable <-flextable(
df,
col_keys = names(df),
cwidth = 1.2,
cheight = 0.4,
defaults = list(),
theme_fun = theme_vanilla)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data = data_add, mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment))+ geom_boxplot()
pics_acantho<-readPNG("./pics/acantho.png")
pics_ambon<-readPNG("./pics/ambon.png")
pics_chromis<-readPNG("./pics/chromis.png")
pics_humbug<-readPNG("./pics/humbug.png")
pics_lemon<-readPNG("./pics/lemon.png")
pics_whitedams<-readPNG("./pics/whitedams.png")
ggplot(data = data_add, mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment))+ geom_boxplot()+annotation_raster(pics_acantho,0.5,1.5,30,35)+annotation_raster(pics_ambon,1.6,2.5,30,35)+annotation_raster(pics_chromis,2.6,3.5,30,35)+annotation_raster(pics_humbug,3.6,4.5,30,35)+annotation_raster(pics_lemon,4.6,5.5,30,35)+annotation_raster(pics_whitedams,5.6,6.5,30,35)
# Use ggsave to save the figure
?ggsave
ggsave("Fish.pdf",plot = last_plot(),path = 'output/figures/',scale = 1,width = NA,height = NA)
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
filter(df, species %in% c("chromis", "lemon", "acantho")) %>% ggplot(mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment)) +geom_boxplot()+annotation_raster(pics_chromis,0.6,1.5,21,24)+annotation_raster(pics_lemon,1.6,2.5,21,24)+annotation_raster(pics_acantho,2.6,3.5,21,24)
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
filter(data_add, species %in% c("chromis", "lemon", "acantho")) %>% ggplot(mapping = aes(y = mean_activity, x = species,fill = treatment,colour = treatment)) +geom_boxplot()+annotation_raster(pics_chromis,0.6,1.5,21,24)+annotation_raster(pics_lemon,1.6,2.5,21,24)+annotation_raster(pics_acantho,2.6,3.5,21,24)
# Do the t-test for all species
acantho_data_control <- data_drop %>% filter(treatment == "control") %>% filter(species
== "acantho")
acantho_data_CO2 <- data_drop %>% filter(treatment == "CO2") %>% filter(species
== "acantho")
t_test_acantho <- t.test(acantho_data_CO2$activity,acantho_data_control$activity)
t_test_acantho
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- data_add %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filter %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- data_add %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filtered %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- data_add %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filtered %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- data_add %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filtered %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
# do the t-test by using the for loop for all the species
for (i in unique(df$species))
{
print(i)
df_filtered <- data_drop %>%  filter(species == i)
outcome <- t.test(df_filtered %>% filter(treatment == "control") %>% select(activity), df_filtered %>% filter(treatment == "CO2") %>% select(activity))
print(outcome)
}
tibble(names_species,data_statistic,data_pvalue,data_df)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
library(tidyr)
library(dplyr)
library('plotrix')
library('flextable')
library(ggplot2)
## 1. The GitHub went down causing us to be unable to access their code and the possibility of work. Further, there are many economic losses. It has been happened many times.
## 2. One of the most common problems in network security incidents is usually human error/error. HEAD overwriting, accidental deletion of branches, and even deliberate deletion of frustrated employees (or former employees who can still access the repository) - are some of the most common reasons for data loss.
## One of the biggest interruptions of GitLab occurred in 2017. It is caused by the accidental deletion of data from the main database server. This event caused the GitLab.com service to be unavailable for hours. They also lost some production data that could not be recovered in the end. Specifically, they lost changes to the database and data, such as projects, comments, user accounts, problems and fragments.
## if we change echo = TRUE to echo = FALSE, it will prevents code, but not the results from appearing in the finished file.
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
data
data_new <- data%>% filter(!(is.na(activity)))
data_new
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
species <- c("acantho", "ambon", "chromis", "humbug", "lemon","whitedams")
t <- c(-0.9,0.3,-0.4,2,2,-1)
df <- c(192,41,25,137,42,119)
p_value <- c(t_test_acantho$p.value,t_test_ambon$p.value,t_test_chromis$p.value,t_test_humbug$p.value,t_test_lemon$p.value,t_test_whitedams$p.value)
df <- data.frame(species, t,df,p_value)
print (df)
for (i in unique(new_data$species))
{
print(i)
permutation <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permuted_group_data <- data_drop %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
print(i)
permutation <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permuted_group_data <- data_drop %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
print(i)
permutation <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permuted_group_data <- data_drop %>% filter(species==i)
permuted_group_data$activity <- permutation
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
print(i)
permutation_test <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permutation_data <- data_drop %>% filter(species==i)
permutation_data$activity <- permutation
outcome_permutation <- t.test(permutation_data%>% filter(treatment == "control") %>% select(activity), permutation_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
print(i)
permutation_test <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permutation_data <- data_drop %>% filter(species==i)
permutation_data$activity <- permutation
outcome_permutation <- t.test(permutation_data%>% filter(treatment == "control") %>% select(activity), permutation_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
permutation_test <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permutation_data <- data_drop %>% filter(species==i)
permutation_data$activity <- permutation_test
outcome_permutation <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(outcome_permutation)
}
for (i in unique(data_drop$species))
{
permutation_test <- sample(data_drop$activity[which(data_drop$species==i)], replace = F)
permutation_data <- data_drop %>% filter(species==i)
permutation_data$activity <- permutation_test
permutation_result <- t.test(permuted_group_data%>% filter(treatment == "control") %>% select(activity), permuted_group_data %>% filter(treatment == "CO2") %>% select(activity))
print(permutation_result)
}
