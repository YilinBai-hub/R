#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.9,0.05,
0.05,0.9), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.05,0.05)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(5,6,1,6,2,6,5,1,2,4,3,1,2,3,4,1,6,5,1,4)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(5,6,1,6,2,6,5,1,2,4,3,1,2,3,4,1,6,5,1,4)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(1,6,2,5,6,1,6,2,5,2)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(5,6,1,6,2,6,5,1,2,4,3,1,2,3,4,1,6,5,1,4)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(1,6,2,5,6,1,6,2,5,2)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
#	The Viterbi algorithm.  See page 30 of notes "Lecture Notes for MATH2307, Part  I Bioinformatics"
#	The input parameters are those for Example 3.1 in the notes
#	Markov transition matrix:
#		Pi must be square,
#		rows of Pi plus p_i0 must sum to 1
#		elements of p_0j must sum to 1
#	Warning: it looks like the transpose of what's needed in the following lines of code
#		because of the way R converts vectors to arrays
#
Pi <- array(c(0.8,0.1,
0.1,0.8), dim=c(2, 2))
p_0j <- c(0.6,0.4)
p_i0 <- c(0.1,0.1)
states <- c("FAIR", "LOADED")
#
#	emission probabilities: q[a, i] is the probability of emitting symbol a from state i
#
q <- array(c(	1/6,1/6, 1/6,1/6,1/6,1/6,
1/10,1/10,1/10,1/10,1/10,1/2), dim=c(6,2))
#
#	Observed sequence of symbols
#
x <- c(5,6,1,6,2,6,5,1,2,4,3,1,2,3,4,1,6,5,1,4)
#	x <- sample(1:2, size = 500, replace=TRUE)
#
N <- dim(Pi)[1]			# Number of Markov states extracted from Pi
alphaSize <- dim(q)[1]	# alphabet size
L <- length(x)			# length of path
#
#	Consistency checks on input parameters
#
if(dim(Pi)[2] != N)	stop("Pi is not square")
if(length(p_0j) != N) stop("p_0j is the wrong length")
if(length(p_i0) != N) stop("p_i0 is the wrong length")
if(!isTRUE(all.equal(rowSums(Pi) + p_i0, rep(1,N))))
stop("rows of (Pi, p_i0) don't sum to 1")
if(sum(p_0j) != 1)	stop("elements of p_0j don't sum to 1")
if(length(states)!=N) stop("wrong number of state labels")
if(dim(q)[2]!=N)		stop("size of array q doesn't match number of Markov states")
if(!isTRUE(all.equal(colSums(q), rep(1,N))))
stop("q probabilities don't sum to 1")
#
#	Set up arrays for v and pointers:
#		v[l,i] is probability of Viterbi path ending in state l with timestep i
#		ptr[i, l] points back to optimum state at timestep i-1 from timestep i
#		piStar is the optimum Markovian path
#
v <- array(dim=c(N, L))
ptr <- array(dim=c(L, N))
piStar <- array(dim=L)
#
#	Initialisation
#
v[,1] <- p_0j*q[x[1],]
ptr[1,] <- rep(0,N)
#
#	Recursion
#
for(t in 1:(L - 1)){
for(l in 1:N){
v[l,t + 1] <- max(v[,t]*Pi[,l])*q[x[t + 1],l]
ptr[t + 1,l] <- which.max(v[, t]*Pi[,l])
}
}
#
#	Termination
#
Prob <- max(v[,L]*p_i0)
piStar[L] <- which.max(v[,L]*p_i0)
#
#	Traceback
#
for(t in L:2){
piStar[t - 1] <- ptr[t, piStar[t]]
}
#
cat("\n Observed Sequence:\n")
cat("   x =", x, "\n\n")
#
cat("\n Probability of the most probable path =", Prob,
"\n\n Most probable path:  \n")
cat(c("   pi = B", states[piStar], "E"), "\n\n")
#
